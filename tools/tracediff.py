#! /usr/bin/env python3

# traceDiff.py
#  Author: Sam Coulter
#  This python script is part of the greater LLFI system.
#  This script will examine two tracing output files generated by running a program after
#  the LLFI traceInst pass has been performed.
#   Exec: traceDiff.py goldenTrace faultyTrace
#  Input: GoldenTrace/faultyTrace - Trace output files after running a traced program
# Output: Trace Summary into Standard output, redirect with PIPE to save
# to file


import os
import sys
import argparse
from tracetools import *

prog = os.path.basename(sys.argv[0])


def traceDiff(argv, output=0):
    # save stdout so we can redirect it without mangling other python scripts
    oldSTDOut = sys.stdout

    parser = argparse.ArgumentParser(
        description='Compares the golden program trace and fault injection '
        'program trace and summarizes the differences.')
    parser.add_argument(
        'golden_trace',
        help='Trace from the golden run.'
    )
    parser.add_argument(
        'faulty_trace',
        help='Trace from a faulty run.'
    )
    parser.add_argument(
        '--quick', action='store_true',
        help='Do a quick decision whether there is a deviation or not.')
    args = parser.parse_args()

    # TODO: rewrite the command line argument of the script
    if output != 0:
        sys.stdout = open(output, "wb")

    goldFile = open(args.golden_trace, 'r')
    goldTrace = goldFile.read()
    goldFile.close()

    faultyFile = open(args.faulty_trace, 'r')
    faultyTrace = faultyFile.read()
    faultyFile.close()

    goldTraceLines = goldTrace.split("\n")
    if len(goldTraceLines) < 2:
        print('ERROR: Invalid golden trace. File too short.')
        sys.exit(1)
    faultyTraceLines = faultyTrace.split("\n")
    if len(faultyTraceLines) < 2:
        print('ERROR: Invalid faulty trace. File too short.')
        sys.exit(1)

    # Examine Header of Trace File
    header = faultyTraceLines[0].split(' ')
    for i in range(0, len(header) - 1):
        keyword = header[i]
        if keyword == "#TraceStartInstNumber:":
            # Remove traces from golden trace that happened before fault
            # injection point
            faultyTraceStartPoint = int(header[i + 1])
            faultyTraceLines.pop(0)
            for i in range(0, faultyTraceStartPoint - 1):
                goldTraceLines.pop(0)

    # record and report the fault injected line
    goldInjectedLine = diffLine(goldTraceLines[0])
    faultInjectedLine = diffLine(faultyTraceLines[0])
    diffID = goldInjectedLine.ID
    if not args.quick:
        print("#FaultReport")
        print("1 @", faultyTraceStartPoint)
        print(goldInjectedLine.raw, "/", faultInjectedLine.Value)

    # remove the fault injected lines
    goldTraceLines.pop(0)
    faultyTraceLines.pop(0)

    for line in goldTraceLines:
        if line == "":
            goldTraceLines.remove(line)

    for line in faultyTraceLines:
        if line == "":
            faultyTraceLines.remove(line)

    lenGT = len(goldTraceLines) - 1
    lenFT = len(faultyTraceLines) - 1

    i = 0

    if (lenGT < 0 and lenFT < 0):
        return 0

    '''
  while (faultyTraceLines[lenFT-i] == goldTraceLines[lenGT-i]):
    postDiffID = diffLine(goldTraceLines[lenGT-i]).ID
    faultyTraceLines.pop(lenFT-i)
    goldTraceLines.pop(lenGT-i)
    i = i + 1
    if lenFT-i < 0 or lenGT-i < 0:
      break
  '''

    report = diffReport(
        goldTraceLines,
        faultyTraceLines,
        faultyTraceStartPoint,
        diffID, quick=args.quick)
    report.printSummary()

    # restore stdout
    sys.stdout = oldSTDOut


if (__name__ == "__main__"):
    traceDiff(sys.argv)
